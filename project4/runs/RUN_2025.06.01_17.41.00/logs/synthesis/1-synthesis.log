
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.38 (git sha1 543faed9c8c, clang++ 17.0.6 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Liberty frontend: /home/omern/.volare/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib
Imported 428 cell types from liberty file.

2. Executing Verilog-2005 frontend: /openlane/designs/project4/src/lab4.v
Parsing SystemVerilog input from `/openlane/designs/project4/src/lab4.v' to AST representation.
Storing AST representation for module `$abstract\alu'.
Storing AST representation for module `$abstract\project4'.
Successfully finished Verilog frontend.

3. Executing HIERARCHY pass (managing design hierarchy).

4. Executing AST frontend in derive mode using pre-parsed AST for module `\project4'.
Generating RTLIL representation for module `\project4'.

4.1. Analyzing design hierarchy..
Top module:  \project4

4.2. Analyzing design hierarchy..
Top module:  \project4
Removing unused module `$abstract\project4'.
Removing unused module `$abstract\alu'.
Removed 2 unused modules.

5. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/project4/runs/RUN_2025.06.01_17.41.00/tmp/synthesis/hierarchy.dot'.
Dumping module project4 to page 1.
Renaming module project4 to project4.

6. Executing TRIBUF pass.

7. Executing HIERARCHY pass (managing design hierarchy).

7.1. Analyzing design hierarchy..
Top module:  \project4

7.2. Analyzing design hierarchy..
Top module:  \project4
Removed 0 unused modules.

8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

9. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/openlane/designs/project4/src/lab4.v:33$4 in module project4.
Removed a total of 0 dead cases.

10. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 3 assignments to connections.

11. Executing PROC_INIT pass (extract init attributes).

12. Executing PROC_ARST pass (detect async resets in processes).

13. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~1 debug messages>

14. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\project4.$proc$/openlane/designs/project4/src/lab4.v:33$4'.
     1/3: $1$memwr$\registers$/openlane/designs/project4/src/lab4.v:35$1_EN[31:0]$10
     2/3: $1$memwr$\registers$/openlane/designs/project4/src/lab4.v:35$1_DATA[31:0]$9
     3/3: $1$memwr$\registers$/openlane/designs/project4/src/lab4.v:35$1_ADDR[4:0]$8

15. Executing PROC_DLATCH pass (convert process syncs to latches).

16. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\project4.$memwr$\registers$/openlane/designs/project4/src/lab4.v:35$1_ADDR' using process `\project4.$proc$/openlane/designs/project4/src/lab4.v:33$4'.
  created $dff cell `$procdff$20' with positive edge clock.
Creating register for signal `\project4.$memwr$\registers$/openlane/designs/project4/src/lab4.v:35$1_DATA' using process `\project4.$proc$/openlane/designs/project4/src/lab4.v:33$4'.
  created $dff cell `$procdff$21' with positive edge clock.
Creating register for signal `\project4.$memwr$\registers$/openlane/designs/project4/src/lab4.v:35$1_EN' using process `\project4.$proc$/openlane/designs/project4/src/lab4.v:33$4'.
  created $dff cell `$procdff$22' with positive edge clock.

17. Executing PROC_MEMWR pass (convert process memory writes to cells).

18. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\project4.$proc$/openlane/designs/project4/src/lab4.v:33$4'.
Removing empty process `project4.$proc$/openlane/designs/project4/src/lab4.v:33$4'.
Cleaned up 1 empty switch.

19. Executing CHECK pass (checking for obvious problems).
Checking module project4...
Found and reported 0 problems.

20. Executing OPT_EXPR pass (perform const folding).
Optimizing module project4.

21. Executing FLATTEN pass (flatten design).

22. Executing OPT_EXPR pass (perform const folding).
Optimizing module project4.

23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \project4..
Removed 3 unused cells and 14 unused wires.
<suppressed ~4 debug messages>

24. Executing OPT pass (performing simple optimizations).

24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module project4.

24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\project4'.
Removed a total of 0 cells.

24.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \project4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

24.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \project4.
    Consolidated identical input bits for $mux cell $procmux$12:
      Old ports: A=0, B=32'11111111111111111111111111111111, Y=$0$memwr$\registers$/openlane/designs/project4/src/lab4.v:35$1_EN[31:0]$7
      New ports: A=1'0, B=1'1, Y=$0$memwr$\registers$/openlane/designs/project4/src/lab4.v:35$1_EN[31:0]$7 [0]
      New connections: $0$memwr$\registers$/openlane/designs/project4/src/lab4.v:35$1_EN[31:0]$7 [31:1] = { $0$memwr$\registers$/openlane/designs/project4/src/lab4.v:35$1_EN[31:0]$7 [0] $0$memwr$\registers$/openlane/designs/project4/src/lab4.v:35$1_EN[31:0]$7 [0] $0$memwr$\registers$/openlane/designs/project4/src/lab4.v:35$1_EN[31:0]$7 [0] $0$memwr$\registers$/openlane/designs/project4/src/lab4.v:35$1_EN[31:0]$7 [0] $0$memwr$\registers$/openlane/designs/project4/src/lab4.v:35$1_EN[31:0]$7 [0] $0$memwr$\registers$/openlane/designs/project4/src/lab4.v:35$1_EN[31:0]$7 [0] $0$memwr$\registers$/openlane/designs/project4/src/lab4.v:35$1_EN[31:0]$7 [0] $0$memwr$\registers$/openlane/designs/project4/src/lab4.v:35$1_EN[31:0]$7 [0] $0$memwr$\registers$/openlane/designs/project4/src/lab4.v:35$1_EN[31:0]$7 [0] $0$memwr$\registers$/openlane/designs/project4/src/lab4.v:35$1_EN[31:0]$7 [0] $0$memwr$\registers$/openlane/designs/project4/src/lab4.v:35$1_EN[31:0]$7 [0] $0$memwr$\registers$/openlane/designs/project4/src/lab4.v:35$1_EN[31:0]$7 [0] $0$memwr$\registers$/openlane/designs/project4/src/lab4.v:35$1_EN[31:0]$7 [0] $0$memwr$\registers$/openlane/designs/project4/src/lab4.v:35$1_EN[31:0]$7 [0] $0$memwr$\registers$/openlane/designs/project4/src/lab4.v:35$1_EN[31:0]$7 [0] $0$memwr$\registers$/openlane/designs/project4/src/lab4.v:35$1_EN[31:0]$7 [0] $0$memwr$\registers$/openlane/designs/project4/src/lab4.v:35$1_EN[31:0]$7 [0] $0$memwr$\registers$/openlane/designs/project4/src/lab4.v:35$1_EN[31:0]$7 [0] $0$memwr$\registers$/openlane/designs/project4/src/lab4.v:35$1_EN[31:0]$7 [0] $0$memwr$\registers$/openlane/designs/project4/src/lab4.v:35$1_EN[31:0]$7 [0] $0$memwr$\registers$/openlane/designs/project4/src/lab4.v:35$1_EN[31:0]$7 [0] $0$memwr$\registers$/openlane/designs/project4/src/lab4.v:35$1_EN[31:0]$7 [0] $0$memwr$\registers$/openlane/designs/project4/src/lab4.v:35$1_EN[31:0]$7 [0] $0$memwr$\registers$/openlane/designs/project4/src/lab4.v:35$1_EN[31:0]$7 [0] $0$memwr$\registers$/openlane/designs/project4/src/lab4.v:35$1_EN[31:0]$7 [0] $0$memwr$\registers$/openlane/designs/project4/src/lab4.v:35$1_EN[31:0]$7 [0] $0$memwr$\registers$/openlane/designs/project4/src/lab4.v:35$1_EN[31:0]$7 [0] $0$memwr$\registers$/openlane/designs/project4/src/lab4.v:35$1_EN[31:0]$7 [0] $0$memwr$\registers$/openlane/designs/project4/src/lab4.v:35$1_EN[31:0]$7 [0] $0$memwr$\registers$/openlane/designs/project4/src/lab4.v:35$1_EN[31:0]$7 [0] $0$memwr$\registers$/openlane/designs/project4/src/lab4.v:35$1_EN[31:0]$7 [0] }
  Optimizing cells in module \project4.
Performed a total of 1 changes.

24.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\project4'.
Removed a total of 0 cells.

24.6. Executing OPT_DFF pass (perform DFF optimizations).

24.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \project4..

24.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module project4.

24.9. Rerunning OPT passes. (Maybe there is more to do..)

24.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \project4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

24.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \project4.
Performed a total of 0 changes.

24.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\project4'.
Removed a total of 0 cells.

24.13. Executing OPT_DFF pass (perform DFF optimizations).

24.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \project4..

24.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module project4.

24.16. Finished OPT passes. (There is nothing left to do.)

25. Executing FSM pass (extract and optimize FSM).

25.1. Executing FSM_DETECT pass (finding FSMs in design).

25.2. Executing FSM_EXTRACT pass (extracting FSM from design).

25.3. Executing FSM_OPT pass (simple optimizations of FSMs).

25.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \project4..

25.5. Executing FSM_OPT pass (simple optimizations of FSMs).

25.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

25.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

25.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

26. Executing OPT pass (performing simple optimizations).

26.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module project4.

26.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\project4'.
Removed a total of 0 cells.

26.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \project4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

26.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \project4.
Performed a total of 0 changes.

26.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\project4'.
Removed a total of 0 cells.

26.6. Executing OPT_DFF pass (perform DFF optimizations).

26.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \project4..

26.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module project4.

26.9. Finished OPT passes. (There is nothing left to do.)

27. Executing WREDUCE pass (reducing word size of cells).

28. Executing PEEPOPT pass (run peephole optimizers).

29. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \project4..

30. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module project4:
  created 0 $alu and 0 $macc cells.

31. Executing SHARE pass (SAT-based resource sharing).

32. Executing OPT pass (performing simple optimizations).

32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module project4.

32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\project4'.
Removed a total of 0 cells.

32.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \project4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

32.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \project4.
Performed a total of 0 changes.

32.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\project4'.
Removed a total of 0 cells.

32.6. Executing OPT_DFF pass (perform DFF optimizations).

32.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \project4..

32.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module project4.

32.9. Finished OPT passes. (There is nothing left to do.)

33. Executing MEMORY pass.

33.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

33.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

33.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).
  Analyzing project4.registers write port 0.

33.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

33.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
Checking read port `\registers'[0] in module `\project4': no output FF found.
Checking read port `\registers'[1] in module `\project4': no output FF found.
Checking read port address `\registers'[0] in module `\project4': no address FF found.
Checking read port address `\registers'[1] in module `\project4': no address FF found.

33.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \project4..

33.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).
Consolidating read ports of memory project4.registers by address:

33.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

33.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \project4..

33.10. Executing MEMORY_COLLECT pass (generating $mem cells).

34. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \project4..

35. Executing OPT pass (performing simple optimizations).

35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module project4.
<suppressed ~3 debug messages>

35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\project4'.
Removed a total of 0 cells.

35.3. Executing OPT_DFF pass (perform DFF optimizations).

35.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \project4..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

35.5. Finished fast OPT passes.

36. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).
Mapping memory \registers in module \project4:
  created 32 $dff cells and 0 static cells of width 32.
  read interface: 0 $dff and 62 $mux cells.
  write interface: 32 write mux blocks.

37. Executing OPT pass (performing simple optimizations).

37.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module project4.
<suppressed ~10 debug messages>

37.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\project4'.
Removed a total of 0 cells.

37.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \project4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

37.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \project4.
Performed a total of 0 changes.

37.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\project4'.
Removed a total of 0 cells.

37.6. Executing OPT_SHARE pass.

37.7. Executing OPT_DFF pass (perform DFF optimizations).

37.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \project4..
Removed 0 unused cells and 101 unused wires.
<suppressed ~1 debug messages>

37.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module project4.

37.10. Rerunning OPT passes. (Maybe there is more to do..)

37.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \project4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

37.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \project4.
Performed a total of 0 changes.

37.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\project4'.
Removed a total of 0 cells.

37.14. Executing OPT_SHARE pass.

37.15. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $memory\registers[9]$46 ($dff) from module project4 (D = \WD3, Q = \registers[9]).
Adding EN signal on $memory\registers[8]$44 ($dff) from module project4 (D = \WD3, Q = \registers[8]).
Adding EN signal on $memory\registers[7]$42 ($dff) from module project4 (D = \WD3, Q = \registers[7]).
Adding EN signal on $memory\registers[6]$40 ($dff) from module project4 (D = \WD3, Q = \registers[6]).
Adding EN signal on $memory\registers[5]$38 ($dff) from module project4 (D = \WD3, Q = \registers[5]).
Adding EN signal on $memory\registers[4]$36 ($dff) from module project4 (D = \WD3, Q = \registers[4]).
Adding EN signal on $memory\registers[3]$34 ($dff) from module project4 (D = \WD3, Q = \registers[3]).
Adding EN signal on $memory\registers[31]$90 ($dff) from module project4 (D = \WD3, Q = \registers[31]).
Adding EN signal on $memory\registers[30]$88 ($dff) from module project4 (D = \WD3, Q = \registers[30]).
Adding EN signal on $memory\registers[2]$32 ($dff) from module project4 (D = \WD3, Q = \registers[2]).
Adding EN signal on $memory\registers[29]$86 ($dff) from module project4 (D = \WD3, Q = \registers[29]).
Adding EN signal on $memory\registers[28]$84 ($dff) from module project4 (D = \WD3, Q = \registers[28]).
Adding EN signal on $memory\registers[27]$82 ($dff) from module project4 (D = \WD3, Q = \registers[27]).
Adding EN signal on $memory\registers[26]$80 ($dff) from module project4 (D = \WD3, Q = \registers[26]).
Adding EN signal on $memory\registers[25]$78 ($dff) from module project4 (D = \WD3, Q = \registers[25]).
Adding EN signal on $memory\registers[24]$76 ($dff) from module project4 (D = \WD3, Q = \registers[24]).
Adding EN signal on $memory\registers[23]$74 ($dff) from module project4 (D = \WD3, Q = \registers[23]).
Adding EN signal on $memory\registers[22]$72 ($dff) from module project4 (D = \WD3, Q = \registers[22]).
Adding EN signal on $memory\registers[21]$70 ($dff) from module project4 (D = \WD3, Q = \registers[21]).
Adding EN signal on $memory\registers[20]$68 ($dff) from module project4 (D = \WD3, Q = \registers[20]).
Adding EN signal on $memory\registers[1]$30 ($dff) from module project4 (D = \WD3, Q = \registers[1]).
Adding EN signal on $memory\registers[19]$66 ($dff) from module project4 (D = \WD3, Q = \registers[19]).
Adding EN signal on $memory\registers[18]$64 ($dff) from module project4 (D = \WD3, Q = \registers[18]).
Adding EN signal on $memory\registers[17]$62 ($dff) from module project4 (D = \WD3, Q = \registers[17]).
Adding EN signal on $memory\registers[16]$60 ($dff) from module project4 (D = \WD3, Q = \registers[16]).
Adding EN signal on $memory\registers[15]$58 ($dff) from module project4 (D = \WD3, Q = \registers[15]).
Adding EN signal on $memory\registers[14]$56 ($dff) from module project4 (D = \WD3, Q = \registers[14]).
Adding EN signal on $memory\registers[13]$54 ($dff) from module project4 (D = \WD3, Q = \registers[13]).
Adding EN signal on $memory\registers[12]$52 ($dff) from module project4 (D = \WD3, Q = \registers[12]).
Adding EN signal on $memory\registers[11]$50 ($dff) from module project4 (D = \WD3, Q = \registers[11]).
Adding EN signal on $memory\registers[10]$48 ($dff) from module project4 (D = \WD3, Q = \registers[10]).
Adding EN signal on $memory\registers[0]$28 ($dff) from module project4 (D = \WD3, Q = \registers[0]).

37.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \project4..
Removed 32 unused cells and 32 unused wires.
<suppressed ~33 debug messages>

37.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module project4.

37.18. Rerunning OPT passes. (Maybe there is more to do..)

37.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \project4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

37.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \project4.
Performed a total of 0 changes.

37.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\project4'.
Removed a total of 0 cells.

37.22. Executing OPT_SHARE pass.

37.23. Executing OPT_DFF pass (perform DFF optimizations).

37.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \project4..

37.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module project4.

37.26. Finished OPT passes. (There is nothing left to do.)

38. Executing TECHMAP pass (map to technology primitives).

38.1. Executing Verilog-2005 frontend: /nix/store/sx2v0i73mn1ih2z1nk61pm9n5gjgpidy-yosys/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nix/store/sx2v0i73mn1ih2z1nk61pm9n5gjgpidy-yosys/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

38.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $and.
No more expansions possible.
<suppressed ~252 debug messages>

39. Executing OPT pass (performing simple optimizations).

39.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module project4.

39.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\project4'.
Removed a total of 0 cells.

39.3. Executing OPT_DFF pass (perform DFF optimizations).

39.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \project4..

39.5. Finished fast OPT passes.

40. Executing ABC pass (technology mapping using ABC).

40.1. Extracting gate netlist of module `\project4' to `<abc-temp-dir>/input.blif'..
Extracted 2069 gates and 3109 wires to a netlist network with 1040 inputs and 96 outputs.

40.1.1. Executing ABC.
Running ABC command: "/nix/store/wq2q0njg3sx8wvj2akz7x1qxwyrv9xlr-yosys-abc/bin/abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

40.1.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:     1984
ABC RESULTS:               NOT cells:        9
ABC RESULTS:             ORNOT cells:        4
ABC RESULTS:              NAND cells:        2
ABC RESULTS:                OR cells:       42
ABC RESULTS:            ANDNOT cells:       32
ABC RESULTS:        internal signals:     1973
ABC RESULTS:           input signals:     1040
ABC RESULTS:          output signals:       96
Removing temp directory.

41. Executing OPT pass (performing simple optimizations).

41.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module project4.
<suppressed ~960 debug messages>

41.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\project4'.
Removed a total of 0 cells.

41.3. Executing OPT_DFF pass (perform DFF optimizations).

41.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \project4..
Removed 8 unused cells and 1257 unused wires.
<suppressed ~9 debug messages>

41.5. Finished fast OPT passes.

42. Executing HIERARCHY pass (managing design hierarchy).

42.1. Analyzing design hierarchy..
Top module:  \project4

42.2. Analyzing design hierarchy..
Top module:  \project4
Removed 0 unused modules.

43. Printing statistics.

=== project4 ===

   Number of wires:               2041
   Number of wire bits:           3138
   Number of public wires:          40
   Number of public wire bits:    1137
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               3089
     $_ANDNOT_                      32
     $_DFFE_PP_                   1024
     $_MUX_                       1984
     $_NAND_                         2
     $_NOT_                          1
     $_ORNOT_                        4
     $_OR_                          42

44. Executing CHECK pass (checking for obvious problems).
Checking module project4...
Found and reported 0 problems.

45. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/project4/runs/RUN_2025.06.01_17.41.00/tmp/synthesis/post_techmap.dot'.
Dumping module project4 to page 1.

46. Executing SHARE pass (SAT-based resource sharing).

47. Executing OPT pass (performing simple optimizations).

47.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module project4.

47.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\project4'.
Removed a total of 0 cells.

47.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \project4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

47.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \project4.
Performed a total of 0 changes.

47.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\project4'.
Removed a total of 0 cells.

47.6. Executing OPT_DFF pass (perform DFF optimizations).

47.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \project4..

47.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module project4.

47.9. Finished OPT passes. (There is nothing left to do.)

48. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \project4..

49. Printing statistics.

=== project4 ===

   Number of wires:               2041
   Number of wire bits:           3138
   Number of public wires:          40
   Number of public wire bits:    1137
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               3089
     $_ANDNOT_                      32
     $_DFFE_PP_                   1024
     $_MUX_                       1984
     $_NAND_                         2
     $_NOT_                          1
     $_ORNOT_                        4
     $_OR_                          42

mapping tbuf

50. Executing TECHMAP pass (map to technology primitives).

50.1. Executing Verilog-2005 frontend: /home/omern/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/home/omern/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

50.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

51. Executing SIMPLEMAP pass (map simple cells to gate primitives).

52. Executing TECHMAP pass (map to technology primitives).

52.1. Executing Verilog-2005 frontend: /home/omern/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/home/omern/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

52.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

53. Executing SIMPLEMAP pass (map simple cells to gate primitives).

54. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

54.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\project4':
  mapped 1024 $_DFF_P_ cells to \sky130_fd_sc_hd__dfxtp_2 cells.

55. Printing statistics.

=== project4 ===

   Number of wires:               3065
   Number of wire bits:           4162
   Number of public wires:          40
   Number of public wire bits:    1137
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               4113
     $_ANDNOT_                      32
     $_MUX_                       3008
     $_NAND_                         2
     $_NOT_                          1
     $_ORNOT_                        4
     $_OR_                          42
     sky130_fd_sc_hd__dfxtp_2     1024

[INFO]: USING STRATEGY AREA 0

56. Executing ABC pass (technology mapping using ABC).

56.1. Extracting gate netlist of module `\project4' to `/tmp/yosys-abc-Eb9FON/input.blif'..
Extracted 3089 gates and 4161 wires to a netlist network with 1072 inputs and 1088 outputs.

56.1.1. Executing ABC.
Running ABC command: "/nix/store/wq2q0njg3sx8wvj2akz7x1qxwyrv9xlr-yosys-abc/bin/abc" -s -f /tmp/yosys-abc-Eb9FON/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-Eb9FON/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-Eb9FON/input.blif 
ABC: + read_lib -w /openlane/designs/project4/runs/RUN_2025.06.01_17.41.00/tmp/synthesis/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.21 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130A_merged" from "/openlane/designs/project4/runs/RUN_2025.06.01_17.41.00/tmp/synthesis/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.33 sec
ABC: Memory =    9.54 MB. Time =     0.33 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /openlane/designs/project4/runs/RUN_2025.06.01_17.41.00/tmp/synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /openlane/designs/project4/runs/RUN_2025.06.01_17.41.00/tmp/synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + retime -D -D 10000 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 10000 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + buffer -N 5 -S 750.0 
ABC: + upsize -D 10000 
ABC: Current delay (1837.43 ps) does not exceed the target delay (10000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 10000 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =   3944 ( 47.4 %)   Cap = 11.8 ff ( 18.4 %)   Area =    35671.71 ( 39.4 %)   Delay =  1832.34 ps  ( 22.6 %)               
ABC: Path  0 --    1035 : 0    2 pi                      A =   0.00  Df =  13.5   -8.1 ps  S =  24.6 ps  Cin =  0.0 ff  Cout =   3.7 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --    3614 : 3    4 sky130_fd_sc_hd__or3b_2 A =   8.76  Df = 475.7 -282.8 ps  S =  92.4 ps  Cin =  1.5 ff  Cout =   7.2 ff  Cmax = 269.2 ff  G =  458  
ABC: Path  2 --    3615 : 1    5 sky130_fd_sc_hd__buf_1  A =   3.75  Df = 662.8 -222.5 ps  S = 280.8 ps  Cin =  2.1 ff  Cout =  23.3 ff  Cmax = 130.0 ff  G = 1049  
ABC: Path  3 --    3989 : 2    4 sky130_fd_sc_hd__nor2_2 A =   6.26  Df = 831.1 -298.8 ps  S = 123.3 ps  Cin =  4.4 ff  Cout =   8.8 ff  Cmax = 141.9 ff  G =  190  
ABC: Path  4 --    3990 : 1    5 sky130_fd_sc_hd__buf_1  A =   3.75  Df =1016.8 -342.8 ps  S = 165.6 ps  Cin =  2.1 ff  Cout =  13.3 ff  Cmax = 130.0 ff  G =  605  
ABC: Path  5 --    3991 : 1    5 sky130_fd_sc_hd__buf_1  A =   3.75  Df =1236.2 -404.8 ps  S = 205.6 ps  Cin =  2.1 ff  Cout =  16.8 ff  Cmax = 130.0 ff  G =  764  
ABC: Path  6 --    3992 : 3    1 sky130_fd_sc_hd__mux2_2 A =  11.26  Df =1512.3 -351.9 ps  S =  45.5 ps  Cin =  2.3 ff  Cout =   2.2 ff  Cmax = 297.6 ff  G =   92  
ABC: Path  7 --    3993 : 1    1 sky130_fd_sc_hd__buf_1  A =   3.75  Df =1832.3 -453.1 ps  S = 396.3 ps  Cin =  2.1 ff  Cout =  33.4 ff  Cmax = 130.0 ff  G = 1590  
ABC: Start-point = pi1034 (\A3 [1]).  End-point = po207 ($auto$rtlil.cc:2684:MuxGate$6086).
ABC: + print_stats -m 
ABC: netlist                       : i/o = 1072/ 1088  lat =    0  nd =  3944  edge =   9627  area =35663.48  delay = 8.00  lev = 8
ABC: + write_blif /tmp/yosys-abc-Eb9FON/output.blif 

56.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__mux4_2 cells:      522
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:       64
ABC RESULTS:   sky130_fd_sc_hd__o22a_2 cells:       64
ABC RESULTS:   sky130_fd_sc_hd__nand3_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__nand3b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or3_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and3b_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__and2b_2 cells:       66
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__or2b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or3b_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:       13
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:       18
ABC RESULTS:   sky130_fd_sc_hd__mux2_2 cells:     1314
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:     1865
ABC RESULTS:        internal signals:     2001
ABC RESULTS:           input signals:     1072
ABC RESULTS:          output signals:     1088
Removing temp directory.

57. Executing SETUNDEF pass (replace undef values with defined constants).

58. Executing HILOMAP pass (mapping to constant drivers).

59. Executing SPLITNETS pass (splitting up multi-bit signals).

60. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \project4..
Removed 0 unused cells and 4161 unused wires.
<suppressed ~1 debug messages>

61. Executing INSBUF pass (insert buffer cells for connected wires).

62. Executing CHECK pass (checking for obvious problems).
Checking module project4...
Found and reported 0 problems.

63. Printing statistics.

=== project4 ===

   Number of wires:               4912
   Number of wire bits:           5017
   Number of public wires:        1032
   Number of public wire bits:    1137
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               4968
     sky130_fd_sc_hd__a21o_2        64
     sky130_fd_sc_hd__and2b_2       66
     sky130_fd_sc_hd__and3_2         2
     sky130_fd_sc_hd__and3b_2        4
     sky130_fd_sc_hd__buf_1       1865
     sky130_fd_sc_hd__dfxtp_2     1024
     sky130_fd_sc_hd__inv_2          3
     sky130_fd_sc_hd__mux2_2      1314
     sky130_fd_sc_hd__mux4_2       522
     sky130_fd_sc_hd__nand2_2       13
     sky130_fd_sc_hd__nand3_2        1
     sky130_fd_sc_hd__nand3b_2       1
     sky130_fd_sc_hd__nor2_2        18
     sky130_fd_sc_hd__o22a_2        64
     sky130_fd_sc_hd__or2_2          1
     sky130_fd_sc_hd__or2b_2         1
     sky130_fd_sc_hd__or3_2          1
     sky130_fd_sc_hd__or3b_2         4

   Chip area for module '\project4': 57452.601600

64. Executing Verilog backend.
Dumping module `\project4'.

65. Executing JSON backend.

End of script. Logfile hash: ad62799b71, CPU: user 6.12s system 0.32s, MEM: 43.58 MB peak
Yosys 0.38 (git sha1 543faed9c8c, clang++ 17.0.6 -fPIC -Os)
Time spent: 75% 2x abc (18 sec), 4% 18x opt_expr (1 sec), ...
