
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.38 (git sha1 543faed9c8c, clang++ 17.0.6 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Liberty frontend: /home/omern/.volare/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib
Imported 428 cell types from liberty file.

2. Executing Verilog-2005 frontend: /openlane/designs/TopModule/src/TopModule.v
Parsing SystemVerilog input from `/openlane/designs/TopModule/src/TopModule.v' to AST representation.
Storing AST representation for module `$abstract\ProgramCounter'.
Storing AST representation for module `$abstract\InstructionMemory'.
Storing AST representation for module `$abstract\ALU'.
Storing AST representation for module `$abstract\RegisterFile'.
Storing AST representation for module `$abstract\InstructionDecoder'.
Storing AST representation for module `$abstract\TopModule'.
Storing AST representation for module `$abstract\HexDigitTo7Segment'.
Storing AST representation for module `$abstract\DisplayController'.
Successfully finished Verilog frontend.

3. Executing HIERARCHY pass (managing design hierarchy).

4. Executing AST frontend in derive mode using pre-parsed AST for module `\TopModule'.
Generating RTLIL representation for module `\TopModule'.

4.1. Analyzing design hierarchy..
Top module:  \TopModule

4.2. Executing AST frontend in derive mode using pre-parsed AST for module `\DisplayController'.
Generating RTLIL representation for module `\DisplayController'.

4.3. Executing AST frontend in derive mode using pre-parsed AST for module `\ALU'.
Generating RTLIL representation for module `\ALU'.

4.4. Executing AST frontend in derive mode using pre-parsed AST for module `\RegisterFile'.
Generating RTLIL representation for module `\RegisterFile'.

4.5. Executing AST frontend in derive mode using pre-parsed AST for module `\InstructionDecoder'.
Generating RTLIL representation for module `\InstructionDecoder'.

4.6. Executing AST frontend in derive mode using pre-parsed AST for module `\InstructionMemory'.
Generating RTLIL representation for module `\InstructionMemory'.

4.7. Executing AST frontend in derive mode using pre-parsed AST for module `\ProgramCounter'.
Generating RTLIL representation for module `\ProgramCounter'.

4.8. Analyzing design hierarchy..
Top module:  \TopModule
Used module:     \DisplayController
Used module:     \ALU
Used module:     \RegisterFile
Used module:     \InstructionDecoder
Used module:     \InstructionMemory
Used module:     \ProgramCounter

4.9. Executing AST frontend in derive mode using pre-parsed AST for module `\HexDigitTo7Segment'.
Generating RTLIL representation for module `\HexDigitTo7Segment'.

4.10. Analyzing design hierarchy..
Top module:  \TopModule
Used module:     \DisplayController
Used module:         \HexDigitTo7Segment
Used module:     \ALU
Used module:     \RegisterFile
Used module:     \InstructionDecoder
Used module:     \InstructionMemory
Used module:     \ProgramCounter

4.11. Analyzing design hierarchy..
Top module:  \TopModule
Used module:     \DisplayController
Used module:         \HexDigitTo7Segment
Used module:     \ALU
Used module:     \RegisterFile
Used module:     \InstructionDecoder
Used module:     \InstructionMemory
Used module:     \ProgramCounter
Removing unused module `$abstract\DisplayController'.
Removing unused module `$abstract\HexDigitTo7Segment'.
Removing unused module `$abstract\TopModule'.
Removing unused module `$abstract\InstructionDecoder'.
Removing unused module `$abstract\RegisterFile'.
Removing unused module `$abstract\ALU'.
Removing unused module `$abstract\InstructionMemory'.
Removing unused module `$abstract\ProgramCounter'.
Removed 8 unused modules.
Mapping positional arguments of cell TopModule.display (DisplayController).
Mapping positional arguments of cell TopModule.alu (ALU).
Mapping positional arguments of cell TopModule.rf (RegisterFile).
Mapping positional arguments of cell TopModule.decoder (InstructionDecoder).
Mapping positional arguments of cell TopModule.imem (InstructionMemory).
Mapping positional arguments of cell TopModule.pc_module (ProgramCounter).

5. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/TopModule/runs/RUN_2025.06.09_18.05.59/tmp/synthesis/hierarchy.dot'.
Dumping module TopModule to page 1.
Renaming module TopModule to TopModule.

6. Executing TRIBUF pass.

7. Executing HIERARCHY pass (managing design hierarchy).

7.1. Analyzing design hierarchy..
Top module:  \TopModule
Used module:     \DisplayController
Used module:         \HexDigitTo7Segment
Used module:     \ALU
Used module:     \RegisterFile
Used module:     \InstructionDecoder
Used module:     \InstructionMemory
Used module:     \ProgramCounter

7.2. Analyzing design hierarchy..
Top module:  \TopModule
Used module:     \DisplayController
Used module:         \HexDigitTo7Segment
Used module:     \ALU
Used module:     \RegisterFile
Used module:     \InstructionDecoder
Used module:     \InstructionMemory
Used module:     \ProgramCounter
Removed 0 unused modules.

8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

9. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/openlane/designs/TopModule/src/TopModule.v:7$26 in module ProgramCounter.
Marked 2 switch rules as full_case in process $proc$/openlane/designs/TopModule/src/TopModule.v:21$24 in module InstructionMemory.
Marked 1 switch rules as full_case in process $proc$/openlane/designs/TopModule/src/TopModule.v:86$23 in module InstructionDecoder.
Marked 1 switch rules as full_case in process $proc$/openlane/designs/TopModule/src/TopModule.v:72$16 in module RegisterFile.
Removed 1 dead cases from process $proc$/openlane/designs/TopModule/src/TopModule.v:45$6 in module ALU.
Marked 1 switch rules as full_case in process $proc$/openlane/designs/TopModule/src/TopModule.v:45$6 in module ALU.
Marked 1 switch rules as full_case in process $proc$/openlane/designs/TopModule/src/TopModule.v:176$3 in module DisplayController.
Removed 1 dead cases from process $proc$/openlane/designs/TopModule/src/TopModule.v:138$28 in module HexDigitTo7Segment.
Marked 1 switch rules as full_case in process $proc$/openlane/designs/TopModule/src/TopModule.v:138$28 in module HexDigitTo7Segment.
Removed a total of 2 dead cases.

10. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 15 assignments to connections.

11. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\DisplayController.$proc$/openlane/designs/TopModule/src/TopModule.v:168$5'.
  Set init value: \sel = 2'00

12. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \reset in `\ProgramCounter.$proc$/openlane/designs/TopModule/src/TopModule.v:7$26'.

13. Executing PROC_ROM pass (convert switches to ROMs).
Converted 1 switch.
<suppressed ~7 debug messages>

14. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\ProgramCounter.$proc$/openlane/designs/TopModule/src/TopModule.v:7$26'.
     1/1: $0\pc[3:0]
Creating decoders for process `\InstructionMemory.$proc$/openlane/designs/TopModule/src/TopModule.v:21$24'.
     1/2: $2\instruction[31:0]
     2/2: $1\instruction[31:0]
Creating decoders for process `\InstructionDecoder.$proc$/openlane/designs/TopModule/src/TopModule.v:86$23'.
     1/2: $1\ALUop[2:0]
     2/2: $1\isImmediate[0:0]
Creating decoders for process `\RegisterFile.$proc$/openlane/designs/TopModule/src/TopModule.v:72$16'.
     1/3: $1$memwr$\registers$/openlane/designs/TopModule/src/TopModule.v:74$13_EN[31:0]$22
     2/3: $1$memwr$\registers$/openlane/designs/TopModule/src/TopModule.v:74$13_DATA[31:0]$21
     3/3: $1$memwr$\registers$/openlane/designs/TopModule/src/TopModule.v:74$13_ADDR[4:0]$20
Creating decoders for process `\ALU.$proc$/openlane/designs/TopModule/src/TopModule.v:45$6'.
     1/1: $1\Result[31:0]
Creating decoders for process `\DisplayController.$proc$/openlane/designs/TopModule/src/TopModule.v:168$5'.
Creating decoders for process `\DisplayController.$proc$/openlane/designs/TopModule/src/TopModule.v:176$3'.
     1/1: $0\an[3:0]
Creating decoders for process `\HexDigitTo7Segment.$proc$/openlane/designs/TopModule/src/TopModule.v:138$28'.
     1/1: $1\seg[6:0]

15. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\InstructionMemory.\instruction' from process `\InstructionMemory.$proc$/openlane/designs/TopModule/src/TopModule.v:21$24'.
No latch inferred for signal `\InstructionDecoder.\rs' from process `\InstructionDecoder.$proc$/openlane/designs/TopModule/src/TopModule.v:86$23'.
No latch inferred for signal `\InstructionDecoder.\rt' from process `\InstructionDecoder.$proc$/openlane/designs/TopModule/src/TopModule.v:86$23'.
No latch inferred for signal `\InstructionDecoder.\rd' from process `\InstructionDecoder.$proc$/openlane/designs/TopModule/src/TopModule.v:86$23'.
No latch inferred for signal `\InstructionDecoder.\imm' from process `\InstructionDecoder.$proc$/openlane/designs/TopModule/src/TopModule.v:86$23'.
No latch inferred for signal `\InstructionDecoder.\ALUop' from process `\InstructionDecoder.$proc$/openlane/designs/TopModule/src/TopModule.v:86$23'.
Latch inferred for signal `\InstructionDecoder.\isImmediate' from process `\InstructionDecoder.$proc$/openlane/designs/TopModule/src/TopModule.v:86$23': $auto$proc_dlatch.cc:427:proc_dlatch$85
No latch inferred for signal `\ALU.\Result' from process `\ALU.$proc$/openlane/designs/TopModule/src/TopModule.v:45$6'.
No latch inferred for signal `\HexDigitTo7Segment.\seg' from process `\HexDigitTo7Segment.$proc$/openlane/designs/TopModule/src/TopModule.v:138$28'.

16. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\ProgramCounter.\pc' using process `\ProgramCounter.$proc$/openlane/designs/TopModule/src/TopModule.v:7$26'.
  created $adff cell `$procdff$94' with positive edge clock and positive level reset.
Creating register for signal `\RegisterFile.$memwr$\registers$/openlane/designs/TopModule/src/TopModule.v:74$13_ADDR' using process `\RegisterFile.$proc$/openlane/designs/TopModule/src/TopModule.v:72$16'.
  created $dff cell `$procdff$95' with positive edge clock.
Creating register for signal `\RegisterFile.$memwr$\registers$/openlane/designs/TopModule/src/TopModule.v:74$13_DATA' using process `\RegisterFile.$proc$/openlane/designs/TopModule/src/TopModule.v:72$16'.
  created $dff cell `$procdff$96' with positive edge clock.
Creating register for signal `\RegisterFile.$memwr$\registers$/openlane/designs/TopModule/src/TopModule.v:74$13_EN' using process `\RegisterFile.$proc$/openlane/designs/TopModule/src/TopModule.v:72$16'.
  created $dff cell `$procdff$97' with positive edge clock.
Creating register for signal `\DisplayController.\seg' using process `\DisplayController.$proc$/openlane/designs/TopModule/src/TopModule.v:176$3'.
  created $dff cell `$procdff$98' with positive edge clock.
Creating register for signal `\DisplayController.\an' using process `\DisplayController.$proc$/openlane/designs/TopModule/src/TopModule.v:176$3'.
  created $dff cell `$procdff$99' with positive edge clock.
Creating register for signal `\DisplayController.\sel' using process `\DisplayController.$proc$/openlane/designs/TopModule/src/TopModule.v:176$3'.
  created $dff cell `$procdff$100' with positive edge clock.

17. Executing PROC_MEMWR pass (convert process memory writes to cells).

18. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\ProgramCounter.$proc$/openlane/designs/TopModule/src/TopModule.v:7$26'.
Removing empty process `ProgramCounter.$proc$/openlane/designs/TopModule/src/TopModule.v:7$26'.
Found and cleaned up 2 empty switches in `\InstructionMemory.$proc$/openlane/designs/TopModule/src/TopModule.v:21$24'.
Removing empty process `InstructionMemory.$proc$/openlane/designs/TopModule/src/TopModule.v:21$24'.
Found and cleaned up 1 empty switch in `\InstructionDecoder.$proc$/openlane/designs/TopModule/src/TopModule.v:86$23'.
Removing empty process `InstructionDecoder.$proc$/openlane/designs/TopModule/src/TopModule.v:86$23'.
Found and cleaned up 1 empty switch in `\RegisterFile.$proc$/openlane/designs/TopModule/src/TopModule.v:72$16'.
Removing empty process `RegisterFile.$proc$/openlane/designs/TopModule/src/TopModule.v:72$16'.
Found and cleaned up 1 empty switch in `\ALU.$proc$/openlane/designs/TopModule/src/TopModule.v:45$6'.
Removing empty process `ALU.$proc$/openlane/designs/TopModule/src/TopModule.v:45$6'.
Removing empty process `DisplayController.$proc$/openlane/designs/TopModule/src/TopModule.v:168$5'.
Found and cleaned up 1 empty switch in `\DisplayController.$proc$/openlane/designs/TopModule/src/TopModule.v:176$3'.
Removing empty process `DisplayController.$proc$/openlane/designs/TopModule/src/TopModule.v:176$3'.
Found and cleaned up 1 empty switch in `\HexDigitTo7Segment.$proc$/openlane/designs/TopModule/src/TopModule.v:138$28'.
Removing empty process `HexDigitTo7Segment.$proc$/openlane/designs/TopModule/src/TopModule.v:138$28'.
Cleaned up 8 empty switches.

19. Executing CHECK pass (checking for obvious problems).
Checking module TopModule...
Checking module ProgramCounter...
Checking module InstructionMemory...
Checking module InstructionDecoder...
Checking module RegisterFile...
Checking module ALU...
Checking module DisplayController...
Checking module HexDigitTo7Segment...
Found and reported 0 problems.

20. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopModule.
Optimizing module ProgramCounter.
Optimizing module InstructionMemory.
<suppressed ~3 debug messages>
Optimizing module InstructionDecoder.
<suppressed ~5 debug messages>
Optimizing module RegisterFile.
Optimizing module ALU.
<suppressed ~1 debug messages>
Optimizing module DisplayController.
<suppressed ~3 debug messages>
Optimizing module HexDigitTo7Segment.

21. Executing FLATTEN pass (flatten design).
Deleting now unused module ProgramCounter.
Deleting now unused module InstructionMemory.
Deleting now unused module InstructionDecoder.
Deleting now unused module RegisterFile.
Deleting now unused module ALU.
Deleting now unused module DisplayController.
Deleting now unused module HexDigitTo7Segment.
<suppressed ~7 debug messages>

22. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopModule.
<suppressed ~3 debug messages>

23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopModule..
Removed 10 unused cells and 55 unused wires.
<suppressed ~13 debug messages>

24. Executing OPT pass (performing simple optimizations).

24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopModule.

24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TopModule'.
Removed a total of 0 cells.

24.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TopModule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $flatten\imem.$procmux$44.
Removed 1 multiplexer ports.
<suppressed ~5 debug messages>

24.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TopModule.
Performed a total of 0 changes.

24.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TopModule'.
Removed a total of 0 cells.

24.6. Executing OPT_DFF pass (perform DFF optimizations).

24.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopModule..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

24.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopModule.

24.9. Rerunning OPT passes. (Maybe there is more to do..)

24.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TopModule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

24.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TopModule.
Performed a total of 0 changes.

24.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TopModule'.
Removed a total of 0 cells.

24.13. Executing OPT_DFF pass (perform DFF optimizations).

24.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopModule..

24.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopModule.

24.16. Finished OPT passes. (There is nothing left to do.)

25. Executing FSM pass (extract and optimize FSM).

25.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking TopModule.display.an as FSM state register:
    Register is connected to module port.
    Users of register don't seem to benefit from recoding.

25.2. Executing FSM_EXTRACT pass (extracting FSM from design).

25.3. Executing FSM_OPT pass (simple optimizations of FSMs).

25.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopModule..

25.5. Executing FSM_OPT pass (simple optimizations of FSMs).

25.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

25.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

25.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

26. Executing OPT pass (performing simple optimizations).

26.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopModule.

26.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TopModule'.
Removed a total of 0 cells.

26.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TopModule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

26.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TopModule.
Performed a total of 0 changes.

26.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TopModule'.
Removed a total of 0 cells.

26.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $flatten\pc_module.$procdff$94 ($adff) from module TopModule (D = $flatten\pc_module.$add$/openlane/designs/TopModule/src/TopModule.v:11$27_Y [3:0], Q = \pc_module.pc).

26.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopModule..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

26.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopModule.

26.9. Rerunning OPT passes. (Maybe there is more to do..)

26.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TopModule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

26.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TopModule.
Performed a total of 0 changes.

26.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TopModule'.
Removed a total of 0 cells.

26.13. Executing OPT_DFF pass (perform DFF optimizations).

26.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopModule..

26.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopModule.

26.16. Finished OPT passes. (There is nothing left to do.)

27. Executing WREDUCE pass (reducing word size of cells).
Removed top 28 address bits (of 32) from memory init port TopModule.$flatten\display.\digit_to_seg.$auto$mem.cc:328:emit$32 ($flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30).
Removed top 31 bits (of 32) from port B of cell TopModule.$flatten\pc_module.$add$/openlane/designs/TopModule/src/TopModule.v:11$27 ($add).
Removed top 28 bits (of 32) from port Y of cell TopModule.$flatten\pc_module.$add$/openlane/designs/TopModule/src/TopModule.v:11$27 ($add).
Removed top 3 bits (of 4) from port B of cell TopModule.$flatten\imem.$procmux$41_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell TopModule.$flatten\imem.$procmux$40_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell TopModule.$flatten\imem.$procmux$39_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell TopModule.$flatten\imem.$procmux$38_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell TopModule.$flatten\imem.$procmux$37_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell TopModule.$flatten\decoder.$procmux$56_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell TopModule.$flatten\decoder.$procmux$55_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell TopModule.$flatten\alu.$procmux$78_CMP1 ($eq).
Removed top 1 bits (of 3) from port B of cell TopModule.$flatten\alu.$procmux$77_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell TopModule.$flatten\alu.$procmux$76_CMP0 ($eq).
Removed top 1 bits (of 2) from port B of cell TopModule.$flatten\display.$procmux$82_CMP0 ($eq).
Removed top 31 bits (of 32) from port B of cell TopModule.$flatten\display.$add$/openlane/designs/TopModule/src/TopModule.v:177$4 ($add).
Removed top 30 bits (of 32) from port Y of cell TopModule.$flatten\display.$add$/openlane/designs/TopModule/src/TopModule.v:177$4 ($add).
Removed top 28 bits (of 32) from port B of cell TopModule.$flatten\display.$shr$/openlane/designs/TopModule/src/TopModule.v:172$2 ($shr).
Removed top 28 bits (of 32) from port Y of cell TopModule.$flatten\display.$shr$/openlane/designs/TopModule/src/TopModule.v:172$2 ($shr).
Removed top 28 bits (of 32) from wire TopModule.$flatten\pc_module.$add$/openlane/designs/TopModule/src/TopModule.v:11$27_Y.

28. Executing PEEPOPT pass (run peephole optimizers).

29. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopModule..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

30. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module TopModule:
  creating $macc model for $flatten\alu.$add$/openlane/designs/TopModule/src/TopModule.v:48$7 ($add).
  creating $macc model for $flatten\alu.$add$/openlane/designs/TopModule/src/TopModule.v:52$11 ($add).
  creating $macc model for $flatten\alu.$sub$/openlane/designs/TopModule/src/TopModule.v:49$8 ($sub).
  creating $macc model for $flatten\alu.$sub$/openlane/designs/TopModule/src/TopModule.v:53$12 ($sub).
  creating $macc model for $flatten\display.$add$/openlane/designs/TopModule/src/TopModule.v:177$4 ($add).
  creating $macc model for $flatten\pc_module.$add$/openlane/designs/TopModule/src/TopModule.v:11$27 ($add).
  creating $alu model for $macc $flatten\pc_module.$add$/openlane/designs/TopModule/src/TopModule.v:11$27.
  creating $alu model for $macc $flatten\display.$add$/openlane/designs/TopModule/src/TopModule.v:177$4.
  creating $alu model for $macc $flatten\alu.$sub$/openlane/designs/TopModule/src/TopModule.v:53$12.
  creating $alu model for $macc $flatten\alu.$sub$/openlane/designs/TopModule/src/TopModule.v:49$8.
  creating $alu model for $macc $flatten\alu.$add$/openlane/designs/TopModule/src/TopModule.v:52$11.
  creating $alu model for $macc $flatten\alu.$add$/openlane/designs/TopModule/src/TopModule.v:48$7.
  creating $alu cell for $flatten\alu.$add$/openlane/designs/TopModule/src/TopModule.v:48$7: $auto$alumacc.cc:485:replace_alu$104
  creating $alu cell for $flatten\alu.$add$/openlane/designs/TopModule/src/TopModule.v:52$11: $auto$alumacc.cc:485:replace_alu$107
  creating $alu cell for $flatten\alu.$sub$/openlane/designs/TopModule/src/TopModule.v:49$8: $auto$alumacc.cc:485:replace_alu$110
  creating $alu cell for $flatten\alu.$sub$/openlane/designs/TopModule/src/TopModule.v:53$12: $auto$alumacc.cc:485:replace_alu$113
  creating $alu cell for $flatten\display.$add$/openlane/designs/TopModule/src/TopModule.v:177$4: $auto$alumacc.cc:485:replace_alu$116
  creating $alu cell for $flatten\pc_module.$add$/openlane/designs/TopModule/src/TopModule.v:11$27: $auto$alumacc.cc:485:replace_alu$119
  created 6 $alu and 0 $macc cells.

31. Executing SHARE pass (SAT-based resource sharing).
Found 4 cells in module TopModule that may be considered for resource sharing.
  Analyzing resource sharing options for $flatten\rf.$memrd$\registers$/openlane/designs/TopModule/src/TopModule.v:70$15 ($memrd):
    Found 4 activation_patterns using ctrl signal { $flatten\alu.$procmux$77_CMP $flatten\alu.$procmux$76_CMP $flatten\alu.$procmux$75_CMP $flatten\alu.$procmux$74_CMP }.
    Found 1 candidates: $flatten\rf.$memrd$\registers$/openlane/designs/TopModule/src/TopModule.v:69$14
    Analyzing resource sharing with $flatten\rf.$memrd$\registers$/openlane/designs/TopModule/src/TopModule.v:69$14 ($memrd):
      Found 6 activation_patterns using ctrl signal { $flatten\alu.$procmux$77_CMP $flatten\alu.$procmux$76_CMP $flatten\alu.$procmux$75_CMP $flatten\alu.$procmux$74_CMP $flatten\alu.$procmux$73_CMP $flatten\alu.$procmux$72_CMP }.
      Activation pattern for cell $flatten\rf.$memrd$\registers$/openlane/designs/TopModule/src/TopModule.v:70$15: $flatten\alu.$procmux$77_CMP = 1'1
      Activation pattern for cell $flatten\rf.$memrd$\registers$/openlane/designs/TopModule/src/TopModule.v:70$15: $flatten\alu.$procmux$75_CMP = 1'1
      Activation pattern for cell $flatten\rf.$memrd$\registers$/openlane/designs/TopModule/src/TopModule.v:70$15: $flatten\alu.$procmux$74_CMP = 1'1
      Activation pattern for cell $flatten\rf.$memrd$\registers$/openlane/designs/TopModule/src/TopModule.v:70$15: $flatten\alu.$procmux$76_CMP = 1'1
      Activation pattern for cell $flatten\rf.$memrd$\registers$/openlane/designs/TopModule/src/TopModule.v:69$14: $flatten\alu.$procmux$77_CMP = 1'1
      Activation pattern for cell $flatten\rf.$memrd$\registers$/openlane/designs/TopModule/src/TopModule.v:69$14: $flatten\alu.$procmux$73_CMP = 1'1
      Activation pattern for cell $flatten\rf.$memrd$\registers$/openlane/designs/TopModule/src/TopModule.v:69$14: $flatten\alu.$procmux$75_CMP = 1'1
      Activation pattern for cell $flatten\rf.$memrd$\registers$/openlane/designs/TopModule/src/TopModule.v:69$14: $flatten\alu.$procmux$74_CMP = 1'1
      Activation pattern for cell $flatten\rf.$memrd$\registers$/openlane/designs/TopModule/src/TopModule.v:69$14: $flatten\alu.$procmux$76_CMP = 1'1
      Activation pattern for cell $flatten\rf.$memrd$\registers$/openlane/designs/TopModule/src/TopModule.v:69$14: $flatten\alu.$procmux$72_CMP = 1'1
      Size of SAT problem: 0 cells, 634 variables, 1765 clauses
      According to the SAT solver this pair of cells can not be shared.
      Model from SAT solver: { $flatten\alu.$procmux$77_CMP $flatten\alu.$procmux$76_CMP $flatten\alu.$procmux$75_CMP $flatten\alu.$procmux$74_CMP $flatten\alu.$procmux$73_CMP $flatten\alu.$procmux$72_CMP } = 6'001000
  Analyzing resource sharing options for $flatten\rf.$memrd$\registers$/openlane/designs/TopModule/src/TopModule.v:69$14 ($memrd):
    Found 6 activation_patterns using ctrl signal { $flatten\alu.$procmux$77_CMP $flatten\alu.$procmux$76_CMP $flatten\alu.$procmux$75_CMP $flatten\alu.$procmux$74_CMP $flatten\alu.$procmux$73_CMP $flatten\alu.$procmux$72_CMP }.
    No candidates found.
  Analyzing resource sharing options for $flatten\alu.$shr$/openlane/designs/TopModule/src/TopModule.v:51$10 ($shr):
    Found 1 activation_patterns using ctrl signal $flatten\alu.$procmux$74_CMP.
    No candidates found.
  Analyzing resource sharing options for $flatten\alu.$shl$/openlane/designs/TopModule/src/TopModule.v:50$9 ($shl):
    Found 1 activation_patterns using ctrl signal $flatten\alu.$procmux$75_CMP.
    No candidates found.

32. Executing OPT pass (performing simple optimizations).

32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopModule.

32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TopModule'.
Removed a total of 0 cells.

32.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TopModule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

32.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TopModule.
Performed a total of 0 changes.

32.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TopModule'.
Removed a total of 0 cells.

32.6. Executing OPT_DFF pass (perform DFF optimizations).

32.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopModule..

32.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopModule.

32.9. Finished OPT passes. (There is nothing left to do.)

33. Executing MEMORY pass.

33.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

33.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

33.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).
  Analyzing TopModule.rf.registers write port 0.

33.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

33.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
Checking read port `$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30'[0] in module `\TopModule': merging output FF to cell.
Checking read port `\rf.registers'[0] in module `\TopModule': no output FF found.
Checking read port `\rf.registers'[1] in module `\TopModule': no output FF found.
Checking read port address `\rf.registers'[0] in module `\TopModule': no address FF found.
Checking read port address `\rf.registers'[1] in module `\TopModule': no address FF found.

33.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopModule..
Removed 1 unused cells and 9 unused wires.
<suppressed ~4 debug messages>

33.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).
Consolidating read ports of memory TopModule.rf.registers by address:

33.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

33.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopModule..

33.10. Executing MEMORY_COLLECT pass (generating $mem cells).

34. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopModule..

35. Executing OPT pass (performing simple optimizations).

35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopModule.
<suppressed ~2 debug messages>

35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TopModule'.
Removed a total of 0 cells.

35.3. Executing OPT_DFF pass (perform DFF optimizations).

35.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopModule..
Removed 4 unused cells and 3 unused wires.
<suppressed ~5 debug messages>

35.5. Finished fast OPT passes.

36. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).
Mapping memory $flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30 in module \TopModule:
  created 16 $dff cells and 0 static cells of width 7.
Extracted data FF from read port 0 of TopModule.$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30: $$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdreg[0]
  read interface: 1 $dff and 15 $mux cells.
  write interface: 0 write mux blocks.
Mapping memory \rf.registers in module \TopModule:
  created 32 $dff cells and 0 static cells of width 32.
  read interface: 0 $dff and 62 $mux cells.
  write interface: 32 write mux blocks.

37. Executing OPT pass (performing simple optimizations).

37.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopModule.
<suppressed ~10 debug messages>

37.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TopModule'.
Removed a total of 0 cells.

37.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TopModule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~39 debug messages>

37.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TopModule.
    Consolidated identical input bits for $mux cell $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][3][6]$173:
      Old ports: A=7'1000110, B=7'0100001, Y=$memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][3]$a$153
      New ports: A=2'10, B=2'01, Y=$memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][3]$a$153 [1:0]
      New connections: $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][3]$a$153 [6:2] = { $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][3]$a$153 [1:0] 2'00 $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][3]$a$153 [1] }
    Consolidated identical input bits for $mux cell $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][3][5]$170:
      Old ports: A=7'0001000, B=7'0000011, Y=$memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][2]$b$151
      New ports: A=2'10, B=2'01, Y={ $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][2]$b$151 [3] $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][2]$b$151 [0] }
      New connections: { $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][2]$b$151 [6:4] $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][2]$b$151 [2:1] } = { 4'0000 $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][2]$b$151 [0] }
    Consolidated identical input bits for $mux cell $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][3][4]$167:
      Old ports: A=7'0000000, B=7'0010000, Y=$memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][2]$a$150
      New ports: A=1'0, B=1'1, Y=$memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][2]$a$150 [4]
      New connections: { $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][2]$a$150 [6:5] $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][2]$a$150 [3:0] } = 6'000000
    Consolidated identical input bits for $mux cell $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][3][3]$164:
      Old ports: A=7'0000010, B=7'1111000, Y=$memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][1]$b$148
      New ports: A=2'01, B=2'10, Y={ $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][1]$b$148 [3] $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][1]$b$148 [1] }
      New connections: { $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][1]$b$148 [6:4] $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][1]$b$148 [2] $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][1]$b$148 [0] } = { $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][1]$b$148 [3] $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][1]$b$148 [3] $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][1]$b$148 [3] 2'00 }
    Consolidated identical input bits for $mux cell $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][3][2]$161:
      Old ports: A=7'0011001, B=7'0010010, Y=$memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][1]$a$147
      New ports: A=2'01, B=2'10, Y=$memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][1]$a$147 [1:0]
      New connections: $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][1]$a$147 [6:2] = { 3'001 $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][1]$a$147 [0] 1'0 }
    Consolidated identical input bits for $mux cell $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][3][1]$158:
      Old ports: A=7'0100100, B=7'0110000, Y=$memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][0]$b$145
      New ports: A=2'01, B=2'10, Y={ $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][0]$b$145 [4] $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][0]$b$145 [2] }
      New connections: { $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][0]$b$145 [6:5] $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][0]$b$145 [3] $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][0]$b$145 [1:0] } = 5'01000
    Consolidated identical input bits for $mux cell $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][3][0]$155:
      Old ports: A=7'1000000, B=7'1111001, Y=$memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][0]$a$144
      New ports: A=1'0, B=1'1, Y=$memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][0]$a$144 [0]
      New connections: $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][0]$a$144 [6:1] = { 1'1 $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][0]$a$144 [0] $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][0]$a$144 [0] $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][0]$a$144 [0] 2'00 }
    Consolidated identical input bits for $mux cell $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][3][7]$176:
      Old ports: A=7'0000110, B=7'0001110, Y=$memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][3]$b$154
      New ports: A=1'0, B=1'1, Y=$memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][3]$b$154 [3]
      New connections: { $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][3]$b$154 [6:4] $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][3]$b$154 [2:0] } = 6'000110
    Consolidated identical input bits for $pmux cell $flatten\imem.$procmux$36:
      Old ports: A=0, B=192'110000000000101000000000000010101100000000001111000000000000111101000001010011111100100000000000111000110011010000000000000001011100000000000101000000000000001010000011001001011111000000000000, Y=$flatten\imem.$2\instruction[31:0]
      New ports: A=14'00000000000000, B=84'110000100001101100011100011101100111101000111111000000011100010100001010110101110000, Y={ $flatten\imem.$2\instruction[31:0] [31:30] $flatten\imem.$2\instruction[31:0] [24] $flatten\imem.$2\instruction[31:0] [21:20] $flatten\imem.$2\instruction[31:0] [18:16] $flatten\imem.$2\instruction[31:0] [14] $flatten\imem.$2\instruction[31:0] [12:11] $flatten\imem.$2\instruction[31:0] [3] $flatten\imem.$2\instruction[31:0] [1:0] }
      New connections: { $flatten\imem.$2\instruction[31:0] [29:25] $flatten\imem.$2\instruction[31:0] [23:22] $flatten\imem.$2\instruction[31:0] [19] $flatten\imem.$2\instruction[31:0] [15] $flatten\imem.$2\instruction[31:0] [13] $flatten\imem.$2\instruction[31:0] [10:4] $flatten\imem.$2\instruction[31:0] [2] } = { $flatten\imem.$2\instruction[31:0] [20] 3'000 $flatten\imem.$2\instruction[31:0] [21] 1'0 $flatten\imem.$2\instruction[31:0] [11] $flatten\imem.$2\instruction[31:0] [17] $flatten\imem.$2\instruction[31:0] [14] $flatten\imem.$2\instruction[31:0] [12] 7'0000000 $flatten\imem.$2\instruction[31:0] [0] }
  Optimizing cells in module \TopModule.
    Consolidated identical input bits for $mux cell $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][3]$152:
      Old ports: A=$memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][3]$a$153, B=$memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][3]$b$154, Y=$memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][1][1]$b$142
      New ports: A={ $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][3]$a$153 [1] 1'0 $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][3]$a$153 [1:0] }, B={ 1'0 $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][3]$b$154 [3] 2'10 }, Y={ $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][1][1]$b$142 [6] $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][1][1]$b$142 [3] $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][1][1]$b$142 [1:0] }
      New connections: { $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][1][1]$b$142 [5:4] $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][1][1]$b$142 [2] } = { $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][1][1]$b$142 [0] 1'0 $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][1][1]$b$142 [1] }
    Consolidated identical input bits for $mux cell $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][2]$149:
      Old ports: A=$memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][2]$a$150, B=$memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][2]$b$151, Y=$memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][1][1]$a$141
      New ports: A={ $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][2]$a$150 [4] 2'00 }, B={ 1'0 $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][2]$b$151 [3] $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][2]$b$151 [0] }, Y={ $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][1][1]$a$141 [4:3] $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][1][1]$a$141 [0] }
      New connections: { $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][1][1]$a$141 [6:5] $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][1][1]$a$141 [2:1] } = { 3'000 $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][1][1]$a$141 [0] }
    Consolidated identical input bits for $mux cell $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][1]$146:
      Old ports: A=$memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][1]$a$147, B=$memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][1]$b$148, Y=$memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][1][0]$b$139
      New ports: A={ 2'01 $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][1]$a$147 [0] $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][1]$a$147 [1:0] }, B={ $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][1]$b$148 [3] $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][1]$b$148 [3] $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][1]$b$148 [3] $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][1]$b$148 [1] 1'0 }, Y={ $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][1][0]$b$139 [5:3] $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][1][0]$b$139 [1:0] }
      New connections: { $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][1][0]$b$139 [6] $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][1][0]$b$139 [2] } = { $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][1][0]$b$139 [5] 1'0 }
    Consolidated identical input bits for $mux cell $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][0]$143:
      Old ports: A=$memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][0]$a$144, B=$memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][0]$b$145, Y=$memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][1][0]$a$138
      New ports: A={ 1'1 $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][0]$a$144 [0] $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][0]$a$144 [0] 1'0 $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][0]$a$144 [0] }, B={ 2'01 $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][0]$b$145 [4] $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][2][0]$b$145 [2] 1'0 }, Y={ $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][1][0]$a$138 [6:4] $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][1][0]$a$138 [2] $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][1][0]$a$138 [0] }
      New connections: { $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][1][0]$a$138 [3] $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][1][0]$a$138 [1] } = { $memory$flatten\display.\digit_to_seg.$auto$proc_rom.cc:150:do_switch$30$rdmux[0][1][0]$a$138 [0] 1'0 }
    Consolidated identical input bits for $mux cell $flatten\imem.$procmux$47:
      Old ports: A=0, B=$flatten\imem.$2\instruction[31:0], Y=\decoder.instruction
      New ports: A=14'00000000000000, B={ $flatten\imem.$2\instruction[31:0] [31:30] $flatten\imem.$2\instruction[31:0] [24] $flatten\imem.$2\instruction[31:0] [21:20] $flatten\imem.$2\instruction[31:0] [18:16] $flatten\imem.$2\instruction[31:0] [14] $flatten\imem.$2\instruction[31:0] [12:11] $flatten\imem.$2\instruction[31:0] [3] $flatten\imem.$2\instruction[31:0] [1:0] }, Y={ \decoder.instruction [31:30] \decoder.instruction [24] \decoder.instruction [21:20] \decoder.instruction [18:16] \decoder.instruction [14] \decoder.instruction [12:11] \decoder.instruction [3] \decoder.instruction [1:0] }
      New connections: { \decoder.instruction [29:25] \decoder.instruction [23:22] \decoder.instruction [19] \decoder.instruction [15] \decoder.instruction [13] \decoder.instruction [10:4] \decoder.instruction [2] } = { \decoder.instruction [20] 3'000 \decoder.instruction [21] 1'0 \decoder.instruction [11] \decoder.instruction [17] \decoder.instruction [14] \decoder.instruction [12] 7'0000000 \decoder.instruction [0] }
  Optimizing cells in module \TopModule.
Performed a total of 14 changes.

37.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TopModule'.
<suppressed ~54 debug messages>
Removed a total of 18 cells.

37.6. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $pmux $flatten\alu.$procmux$71 in front of them:
        $auto$alumacc.cc:485:replace_alu$113
        $auto$alumacc.cc:485:replace_alu$107
        $auto$alumacc.cc:485:replace_alu$110
        $auto$alumacc.cc:485:replace_alu$104

37.7. Executing OPT_DFF pass (perform DFF optimizations).

37.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopModule..
Removed 0 unused cells and 147 unused wires.
<suppressed ~1 debug messages>

37.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopModule.
<suppressed ~35 debug messages>

37.10. Rerunning OPT passes. (Maybe there is more to do..)

37.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TopModule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $memory\rf.registers$rdmux[0][3][0]$264.
    dead port 1/2 on $mux $memory\rf.registers$rdmux[0][3][1]$267.
    dead port 2/2 on $mux $memory\rf.registers$rdmux[0][3][2]$270.
    dead port 2/2 on $mux $memory\rf.registers$rdmux[0][3][3]$273.
    dead port 1/2 on $mux $memory\rf.registers$rdmux[0][3][4]$276.
    dead port 1/2 on $mux $memory\rf.registers$rdmux[0][3][5]$279.
    dead port 2/2 on $mux $memory\rf.registers$rdmux[0][3][6]$282.
    dead port 2/2 on $mux $memory\rf.registers$rdmux[0][3][7]$285.
    dead port 1/2 on $mux $memory\rf.registers$rdmux[0][4][11]$321.
    dead port 2/2 on $mux $memory\rf.registers$rdmux[0][4][11]$321.
    dead port 1/2 on $mux $memory\rf.registers$rdmux[0][4][12]$324.
    dead port 2/2 on $mux $memory\rf.registers$rdmux[0][4][12]$324.
    dead port 1/2 on $mux $memory\rf.registers$rdmux[0][4][14]$330.
    dead port 2/2 on $mux $memory\rf.registers$rdmux[0][4][14]$330.
    dead port 1/2 on $mux $memory\rf.registers$rdmux[0][4][1]$291.
    dead port 2/2 on $mux $memory\rf.registers$rdmux[0][4][1]$291.
    dead port 1/2 on $mux $memory\rf.registers$rdmux[0][4][3]$297.
    dead port 2/2 on $mux $memory\rf.registers$rdmux[0][4][3]$297.
    dead port 1/2 on $mux $memory\rf.registers$rdmux[0][4][4]$300.
    dead port 2/2 on $mux $memory\rf.registers$rdmux[0][4][4]$300.
    dead port 1/2 on $mux $memory\rf.registers$rdmux[0][4][6]$306.
    dead port 2/2 on $mux $memory\rf.registers$rdmux[0][4][6]$306.
    dead port 1/2 on $mux $memory\rf.registers$rdmux[0][4][9]$315.
    dead port 2/2 on $mux $memory\rf.registers$rdmux[0][4][9]$315.
    dead port 1/2 on $mux $memory\rf.registers$rdmux[1][3][1]$360.
    dead port 2/2 on $mux $memory\rf.registers$rdmux[1][3][1]$360.
    dead port 1/2 on $mux $memory\rf.registers$rdmux[1][3][3]$366.
    dead port 2/2 on $mux $memory\rf.registers$rdmux[1][3][3]$366.
    dead port 1/2 on $mux $memory\rf.registers$rdmux[1][3][5]$372.
    dead port 2/2 on $mux $memory\rf.registers$rdmux[1][3][5]$372.
    dead port 1/2 on $mux $memory\rf.registers$rdmux[1][3][7]$378.
    dead port 2/2 on $mux $memory\rf.registers$rdmux[1][3][7]$378.
    dead port 1/2 on $mux $memory\rf.registers$rdmux[1][4][0]$381.
    dead port 1/2 on $mux $memory\rf.registers$rdmux[1][4][10]$411.
    dead port 2/2 on $mux $memory\rf.registers$rdmux[1][4][10]$411.
    dead port 1/2 on $mux $memory\rf.registers$rdmux[1][4][11]$414.
    dead port 2/2 on $mux $memory\rf.registers$rdmux[1][4][11]$414.
    dead port 2/2 on $mux $memory\rf.registers$rdmux[1][4][12]$417.
    dead port 2/2 on $mux $memory\rf.registers$rdmux[1][4][13]$420.
    dead port 1/2 on $mux $memory\rf.registers$rdmux[1][4][14]$423.
    dead port 2/2 on $mux $memory\rf.registers$rdmux[1][4][14]$423.
    dead port 1/2 on $mux $memory\rf.registers$rdmux[1][4][15]$426.
    dead port 2/2 on $mux $memory\rf.registers$rdmux[1][4][15]$426.
    dead port 1/2 on $mux $memory\rf.registers$rdmux[1][4][1]$384.
    dead port 1/2 on $mux $memory\rf.registers$rdmux[1][4][2]$387.
    dead port 2/2 on $mux $memory\rf.registers$rdmux[1][4][2]$387.
    dead port 1/2 on $mux $memory\rf.registers$rdmux[1][4][3]$390.
    dead port 2/2 on $mux $memory\rf.registers$rdmux[1][4][3]$390.
    dead port 1/2 on $mux $memory\rf.registers$rdmux[1][4][4]$393.
    dead port 1/2 on $mux $memory\rf.registers$rdmux[1][4][5]$396.
    dead port 1/2 on $mux $memory\rf.registers$rdmux[1][4][6]$399.
    dead port 2/2 on $mux $memory\rf.registers$rdmux[1][4][6]$399.
    dead port 1/2 on $mux $memory\rf.registers$rdmux[1][4][7]$402.
    dead port 2/2 on $mux $memory\rf.registers$rdmux[1][4][7]$402.
    dead port 2/2 on $mux $memory\rf.registers$rdmux[1][4][8]$405.
    dead port 2/2 on $mux $memory\rf.registers$rdmux[1][4][9]$408.
Removed 56 multiplexer ports.
<suppressed ~26 debug messages>

37.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TopModule.
    New ctrl vector for $pmux cell $flatten\alu.$procmux$71: { $flatten\alu.$procmux$75_CMP $flatten\alu.$procmux$74_CMP $auto$opt_reduce.cc:134:opt_pmux$619 }
  Optimizing cells in module \TopModule.
Performed a total of 1 changes.

37.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TopModule'.
Removed a total of 0 cells.

37.14. Executing OPT_SHARE pass.

37.15. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $memory\rf.registers[7]$193 ($dff) from module TopModule (D = \display.value, Q = \rf.registers[7]).
Adding EN signal on $memory\rf.registers[6]$191 ($dff) from module TopModule (D = \display.value, Q = \rf.registers[6]).
Adding EN signal on $memory\rf.registers[5]$189 ($dff) from module TopModule (D = \display.value, Q = \rf.registers[5]).
Adding EN signal on $memory\rf.registers[4]$187 ($dff) from module TopModule (D = \display.value, Q = \rf.registers[4]).
Adding EN signal on $memory\rf.registers[3]$185 ($dff) from module TopModule (D = \display.value, Q = \rf.registers[3]).
Adding EN signal on $memory\rf.registers[31]$241 ($dff) from module TopModule (D = \display.value, Q = \rf.registers[31]).
Adding EN signal on $memory\rf.registers[30]$239 ($dff) from module TopModule (D = \display.value, Q = \rf.registers[30]).
Adding EN signal on $memory\rf.registers[2]$183 ($dff) from module TopModule (D = \display.value, Q = \rf.registers[2]).
Adding EN signal on $memory\rf.registers[29]$237 ($dff) from module TopModule (D = \display.value, Q = \rf.registers[29]).
Adding EN signal on $memory\rf.registers[28]$235 ($dff) from module TopModule (D = \display.value, Q = \rf.registers[28]).
Adding EN signal on $memory\rf.registers[27]$233 ($dff) from module TopModule (D = \display.value, Q = \rf.registers[27]).
Adding EN signal on $memory\rf.registers[26]$231 ($dff) from module TopModule (D = \display.value, Q = \rf.registers[26]).
Adding EN signal on $memory\rf.registers[25]$229 ($dff) from module TopModule (D = \display.value, Q = \rf.registers[25]).
Adding EN signal on $memory\rf.registers[24]$227 ($dff) from module TopModule (D = \display.value, Q = \rf.registers[24]).
Adding EN signal on $memory\rf.registers[1]$181 ($dff) from module TopModule (D = \display.value, Q = \rf.registers[1]).
Adding EN signal on $memory\rf.registers[0]$179 ($dff) from module TopModule (D = \display.value, Q = \rf.registers[0]).

37.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopModule..
Removed 34 unused cells and 104 unused wires.
<suppressed ~47 debug messages>

37.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopModule.

37.18. Rerunning OPT passes. (Maybe there is more to do..)

37.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TopModule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

37.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TopModule.
Performed a total of 0 changes.

37.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TopModule'.
Removed a total of 0 cells.

37.22. Executing OPT_SHARE pass.

37.23. Executing OPT_DFF pass (perform DFF optimizations).
Handling D = Q on $memory\rf.registers[8]$195 ($dff) from module TopModule (removing D path).
Handling D = Q on $memory\rf.registers[21]$221 ($dff) from module TopModule (removing D path).
Handling D = Q on $memory\rf.registers[20]$219 ($dff) from module TopModule (removing D path).
Handling D = Q on $memory\rf.registers[19]$217 ($dff) from module TopModule (removing D path).
Handling D = Q on $memory\rf.registers[17]$213 ($dff) from module TopModule (removing D path).
Handling D = Q on $memory\rf.registers[16]$211 ($dff) from module TopModule (removing D path).
Handling D = Q on $memory\rf.registers[15]$209 ($dff) from module TopModule (removing D path).
Handling D = Q on $memory\rf.registers[14]$207 ($dff) from module TopModule (removing D path).
Handling D = Q on $memory\rf.registers[11]$201 ($dff) from module TopModule (removing D path).
Handling D = Q on $memory\rf.registers[10]$199 ($dff) from module TopModule (removing D path).

37.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopModule..

37.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopModule.
<suppressed ~8 debug messages>

37.26. Rerunning OPT passes. (Maybe there is more to do..)

37.27. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TopModule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

37.28. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TopModule.
Performed a total of 0 changes.

37.29. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TopModule'.
Removed a total of 0 cells.

37.30. Executing OPT_SHARE pass.

37.31. Executing OPT_DFF pass (perform DFF optimizations).

37.32. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopModule..
Removed 0 unused cells and 8 unused wires.
<suppressed ~1 debug messages>

37.33. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopModule.
<suppressed ~4 debug messages>

37.34. Rerunning OPT passes. (Maybe there is more to do..)

37.35. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TopModule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

37.36. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TopModule.
Performed a total of 0 changes.

37.37. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TopModule'.
Removed a total of 0 cells.

37.38. Executing OPT_SHARE pass.

37.39. Executing OPT_DFF pass (perform DFF optimizations).

37.40. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopModule..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

37.41. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopModule.

37.42. Rerunning OPT passes. (Maybe there is more to do..)

37.43. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TopModule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

37.44. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TopModule.
Performed a total of 0 changes.

37.45. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TopModule'.
Removed a total of 0 cells.

37.46. Executing OPT_SHARE pass.

37.47. Executing OPT_DFF pass (perform DFF optimizations).

37.48. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopModule..

37.49. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopModule.

37.50. Finished OPT passes. (There is nothing left to do.)

38. Executing TECHMAP pass (map to technology primitives).

38.1. Executing Verilog-2005 frontend: /nix/store/sx2v0i73mn1ih2z1nk61pm9n5gjgpidy-yosys/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nix/store/sx2v0i73mn1ih2z1nk61pm9n5gjgpidy-yosys/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

38.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$661999b8ebc8b4b81aa840f2824545b2035f8a4b\_90_pmux for cells of type $pmux.
Using template $paramod$57f63e8a3282e053be0430389b09fa050ac7dca0\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $dff.
Using template $paramod$constmap:b9a86d073741c2a0f7bb241e73c2dd11747f3288$paramod$56955d0f36f77738c952d3505dc563df3ee11b94\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:b9a86d073741c2a0f7bb241e73c2dd11747f3288$paramod$dce7c1188cb25d2520d170426d59301c3b73f9e7\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$54d740639e1393b22262823179ff783ea9f17a35\_90_pmux for cells of type $pmux.
Using template $paramod$fbc7873bff55778c0b3173955b7e4bce1d9d6834\_90_alu for cells of type $alu.
Using template $paramod$175e67c02b86e96b1288b9dc100122520d7240d8\_90_alu for cells of type $alu.
Using template $paramod$c2e415ef15bc3ccd2723772353a6b450d3d76206\_90_pmux for cells of type $pmux.
Using template $paramod$32a7b7b86c07519b7537abc18e96f0331f97914d\_90_alu for cells of type $alu.
Using template $paramod$constmap:37fce53a574c920c667b51c5e34bdd9ebbd08b19$paramod$4c9912796d912ffb6942248112e3f15e04f1482d\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $and.
Running "alumacc" on wrapper $extern:wrap:$neg:A_SIGNED=0:A_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$neg:A_SIGNED=0:A_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$neg:A_SIGNED=0:A_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000010 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
Using template $paramod$c6baa65225090ac0a120feab1b920965244aa496\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~2576 debug messages>

39. Executing OPT pass (performing simple optimizations).

39.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopModule.
<suppressed ~805 debug messages>

39.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TopModule'.
<suppressed ~525 debug messages>
Removed a total of 175 cells.

39.3. Executing OPT_DFF pass (perform DFF optimizations).

39.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopModule..
Removed 30 unused cells and 855 unused wires.
<suppressed ~31 debug messages>

39.5. Finished fast OPT passes.

40. Executing ABC pass (technology mapping using ABC).

40.1. Extracting gate netlist of module `\TopModule' to `<abc-temp-dir>/input.blif'..
Extracted 1673 gates and 2002 wires to a netlist network with 327 inputs and 59 outputs.

40.1.1. Executing ABC.
Running ABC command: "/nix/store/wq2q0njg3sx8wvj2akz7x1qxwyrv9xlr-yosys-abc/bin/abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

40.1.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:       97
ABC RESULTS:               MUX cells:      633
ABC RESULTS:             ORNOT cells:       40
ABC RESULTS:               NOR cells:       39
ABC RESULTS:                OR cells:      278
ABC RESULTS:               AND cells:       45
ABC RESULTS:              NAND cells:       38
ABC RESULTS:              XNOR cells:        7
ABC RESULTS:            ANDNOT cells:      369
ABC RESULTS:               XOR cells:       95
ABC RESULTS:        internal signals:     1616
ABC RESULTS:           input signals:      327
ABC RESULTS:          output signals:       59
Removing temp directory.

41. Executing OPT pass (performing simple optimizations).

41.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopModule.
<suppressed ~135 debug messages>

41.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TopModule'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

41.3. Executing OPT_DFF pass (perform DFF optimizations).

41.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopModule..
Removed 1 unused cells and 683 unused wires.
<suppressed ~4 debug messages>

41.5. Finished fast OPT passes.

42. Executing HIERARCHY pass (managing design hierarchy).

42.1. Analyzing design hierarchy..
Top module:  \TopModule

42.2. Analyzing design hierarchy..
Top module:  \TopModule
Removed 0 unused modules.

43. Printing statistics.

=== TopModule ===

   Number of wires:               1662
   Number of wire bits:           2848
   Number of public wires:          67
   Number of public wire bits:    1236
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1975
     $_ANDNOT_                     368
     $_AND_                         45
     $_DFFE_PP0P_                    4
     $_DFFE_PP_                    320
     $_DFF_P_                       13
     $_MUX_                        633
     $_NAND_                        38
     $_NOR_                         39
     $_NOT_                         96
     $_ORNOT_                       39
     $_OR_                         278
     $_XNOR_                         7
     $_XOR_                         95

44. Executing CHECK pass (checking for obvious problems).
Checking module TopModule...
Found and reported 0 problems.

45. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/TopModule/runs/RUN_2025.06.09_18.05.59/tmp/synthesis/post_techmap.dot'.
Dumping module TopModule to page 1.

46. Executing SHARE pass (SAT-based resource sharing).

47. Executing OPT pass (performing simple optimizations).

47.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopModule.

47.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TopModule'.
Removed a total of 0 cells.

47.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \TopModule..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

47.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \TopModule.
Performed a total of 0 changes.

47.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\TopModule'.
Removed a total of 0 cells.

47.6. Executing OPT_DFF pass (perform DFF optimizations).

47.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopModule..

47.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module TopModule.

47.9. Finished OPT passes. (There is nothing left to do.)

48. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopModule..
Removed 0 unused cells and 49 unused wires.
<suppressed ~49 debug messages>

49. Printing statistics.

=== TopModule ===

   Number of wires:               1613
   Number of wire bits:           1984
   Number of public wires:          18
   Number of public wire bits:     372
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1975
     $_ANDNOT_                     368
     $_AND_                         45
     $_DFFE_PP0P_                    4
     $_DFFE_PP_                    320
     $_DFF_P_                       13
     $_MUX_                        633
     $_NAND_                        38
     $_NOR_                         39
     $_NOT_                         96
     $_ORNOT_                       39
     $_OR_                         278
     $_XNOR_                         7
     $_XOR_                         95

mapping tbuf

50. Executing TECHMAP pass (map to technology primitives).

50.1. Executing Verilog-2005 frontend: /home/omern/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/home/omern/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

50.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

51. Executing SIMPLEMAP pass (map simple cells to gate primitives).

52. Executing TECHMAP pass (map to technology primitives).

52.1. Executing Verilog-2005 frontend: /home/omern/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/home/omern/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

52.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

53. Executing SIMPLEMAP pass (map simple cells to gate primitives).

54. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

54.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\TopModule':
  mapped 4 $_DFF_PN0_ cells to \sky130_fd_sc_hd__dfrtp_2 cells.
  mapped 333 $_DFF_P_ cells to \sky130_fd_sc_hd__dfxtp_2 cells.

55. Printing statistics.

=== TopModule ===

   Number of wires:               1941
   Number of wire bits:           2312
   Number of public wires:          18
   Number of public wire bits:     372
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2303
     $_ANDNOT_                     368
     $_AND_                         45
     $_MUX_                        957
     $_NAND_                        38
     $_NOR_                         39
     $_NOT_                        100
     $_ORNOT_                       39
     $_OR_                         278
     $_XNOR_                         7
     $_XOR_                         95
     sky130_fd_sc_hd__dfrtp_2        4
     sky130_fd_sc_hd__dfxtp_2      333

[INFO]: USING STRATEGY AREA 0

56. Executing ABC pass (technology mapping using ABC).

56.1. Extracting gate netlist of module `\TopModule' to `/tmp/yosys-abc-hqQDqw/input.blif'..
Extracted 1966 gates and 2294 wires to a netlist network with 328 inputs and 373 outputs.

56.1.1. Executing ABC.
Running ABC command: "/nix/store/wq2q0njg3sx8wvj2akz7x1qxwyrv9xlr-yosys-abc/bin/abc" -s -f /tmp/yosys-abc-hqQDqw/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-hqQDqw/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-hqQDqw/input.blif 
ABC: + read_lib -w /openlane/designs/TopModule/runs/RUN_2025.06.09_18.05.59/tmp/synthesis/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.19 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130A_merged" from "/openlane/designs/TopModule/runs/RUN_2025.06.09_18.05.59/tmp/synthesis/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.27 sec
ABC: Memory =    9.54 MB. Time =     0.27 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /openlane/designs/TopModule/runs/RUN_2025.06.09_18.05.59/tmp/synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /openlane/designs/TopModule/runs/RUN_2025.06.09_18.05.59/tmp/synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + retime -D -D 10000 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 10000 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + buffer -N 5 -S 750.0 
ABC: + upsize -D 10000 
ABC: Current delay (7143.93 ps) does not exceed the target delay (10000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 10000 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =   1673 ( 43.8 %)   Cap = 10.8 ff ( 10.9 %)   Area =    11464.75 ( 56.1 %)   Delay =  7492.39 ps  (  9.4 %)               
ABC: Path  0 --       5 : 0    3 pi                        A =   0.00  Df =  28.8  -16.8 ps  S =  45.5 ps  Cin =  0.0 ff  Cout =   8.4 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --     734 : 4    3 sky130_fd_sc_hd__or4bb_2  A =  12.51  Df = 662.6 -460.6 ps  S = 119.0 ps  Cin =  1.5 ff  Cout =   9.0 ff  Cmax = 312.2 ff  G =  584  
ABC: Path  2 --     743 : 5    3 sky130_fd_sc_hd__a2111o_2 A =  12.51  Df =1124.8 -320.5 ps  S =  80.3 ps  Cin =  2.4 ff  Cout =   9.1 ff  Cmax = 324.1 ff  G =  358  
ABC: Path  3 --     753 : 1    5 sky130_fd_sc_hd__buf_1    A =   3.75  Df =1248.4 -315.8 ps  S = 105.5 ps  Cin =  2.1 ff  Cout =   8.1 ff  Cmax = 130.0 ff  G =  362  
ABC: Path  4 --     758 : 3    1 sky130_fd_sc_hd__or3_2    A =   7.51  Df =1646.5 -596.2 ps  S =  73.6 ps  Cin =  1.5 ff  Cout =   2.4 ff  Cmax = 310.4 ff  G =  154  
ABC: Path  5 --     759 : 4    5 sky130_fd_sc_hd__o31a_2   A =  10.01  Df =1796.7 -359.0 ps  S =  99.9 ps  Cin =  2.3 ff  Cout =  15.6 ff  Cmax = 285.7 ff  G =  632  
ABC: Path  6 --     770 : 4    2 sky130_fd_sc_hd__or4_2    A =   8.76  Df =2461.9 -728.0 ps  S = 112.7 ps  Cin =  1.5 ff  Cout =   6.1 ff  Cmax = 310.4 ff  G =  385  
ABC: Path  7 --    1083 : 4    4 sky130_fd_sc_hd__or4_2    A =   8.76  Df =3163.6-1301.3 ps  S = 117.9 ps  Cin =  1.5 ff  Cout =   7.6 ff  Cmax = 310.4 ff  G =  477  
ABC: Path  8 --    1535 : 4    4 sky130_fd_sc_hd__or4_2    A =   8.76  Df =3796.6-1524.6 ps  S = 151.8 ps  Cin =  1.5 ff  Cout =  17.1 ff  Cmax = 310.4 ff  G = 1094  
ABC: Path  9 --    1569 : 3    5 sky130_fd_sc_hd__or3_2    A =   7.51  Df =4290.4-1861.9 ps  S = 112.0 ps  Cin =  1.5 ff  Cout =  13.7 ff  Cmax = 310.4 ff  G =  859  
ABC: Path 10 --    1643 : 3    2 sky130_fd_sc_hd__or3_2    A =   7.51  Df =4731.2-2180.1 ps  S =  88.0 ps  Cin =  1.5 ff  Cout =   6.1 ff  Cmax = 310.4 ff  G =  383  
ABC: Path 11 --    1644 : 2    4 sky130_fd_sc_hd__or2_2    A =   6.26  Df =5072.2-2366.4 ps  S = 109.1 ps  Cin =  1.5 ff  Cout =  19.3 ff  Cmax = 299.4 ff  G = 1269  
ABC: Path 12 --    1685 : 3    3 sky130_fd_sc_hd__or3_2    A =   7.51  Df =5547.2-2679.1 ps  S = 112.6 ps  Cin =  1.5 ff  Cout =  13.9 ff  Cmax = 310.4 ff  G =  875  
ABC: Path 13 --    1704 : 2    1 sky130_fd_sc_hd__nand2_2  A =   6.26  Df =5627.7-2714.0 ps  S =  41.1 ps  Cin =  4.4 ff  Cout =   1.5 ff  Cmax = 295.7 ff  G =   32  
ABC: Path 14 --    1705 : 2    1 sky130_fd_sc_hd__or2b_2   A =   8.76  Df =5905.4  -82.5 ps  S =  49.7 ps  Cin =  1.6 ff  Cout =   2.4 ff  Cmax = 312.2 ff  G =  148  
ABC: Path 15 --    1706 : 3    2 sky130_fd_sc_hd__a21o_2   A =   8.76  Df =6121.0 -178.9 ps  S =  47.4 ps  Cin =  2.4 ff  Cout =   6.3 ff  Cmax = 309.5 ff  G =  251  
ABC: Path 16 --    1707 : 2    3 sky130_fd_sc_hd__and2_2   A =   7.51  Df =6327.9 -219.0 ps  S =  79.1 ps  Cin =  1.5 ff  Cout =  11.8 ff  Cmax = 303.0 ff  G =  760  
ABC: Path 17 --    1709 : 2    4 sky130_fd_sc_hd__nor2_2   A =   6.26  Df =6509.9 -246.9 ps  S = 178.2 ps  Cin =  4.4 ff  Cout =  14.2 ff  Cmax = 141.9 ff  G =  304  
ABC: Path 18 --    1710 : 2    1 sky130_fd_sc_hd__nor2_2   A =   6.26  Df =6561.9 -165.5 ps  S =  85.4 ps  Cin =  4.4 ff  Cout =   5.1 ff  Cmax = 141.9 ff  G =  109  
ABC: Path 19 --    1717 : 3    3 sky130_fd_sc_hd__o21ai_2  A =   8.76  Df =6937.6 -134.2 ps  S = 437.1 ps  Cin =  4.5 ff  Cout =  37.2 ff  Cmax = 139.2 ff  G =  814  
ABC: Path 20 --    2114 : 3    1 sky130_fd_sc_hd__mux2_2   A =  11.26  Df =7168.8  -72.7 ps  S =  45.5 ps  Cin =  2.3 ff  Cout =   2.2 ff  Cmax = 297.6 ff  G =   92  
ABC: Path 21 --    2115 : 1    1 sky130_fd_sc_hd__buf_1    A =   3.75  Df =7492.4 -177.4 ps  S = 396.9 ps  Cin =  2.1 ff  Cout =  33.4 ff  Cmax = 130.0 ff  G = 1590  
ABC: Start-point = pi4 (\imem.addr [0]).  End-point = po243 ($auto$rtlil.cc:2684:MuxGate$7568).
ABC: + print_stats -m 
ABC: netlist                       : i/o =  328/  373  lat =    0  nd =  1673  edge =   3453  area =11463.60  delay =26.00  lev = 26
ABC: + write_blif /tmp/yosys-abc-hqQDqw/output.blif 

56.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__nor4b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or4bb_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a2111oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nor4_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and3b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__and4bb_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o21bai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o211ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a21boi_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__o22ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or3b_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__nand3b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a41o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a311o_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a32o_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__or4_2 cells:       16
ABC RESULTS:   sky130_fd_sc_hd__o31ai_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:       45
ABC RESULTS:   sky130_fd_sc_hd__nor3_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__and4_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a2111o_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a221o_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__mux4_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o22a_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__o2bb2a_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o311ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o21ba_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__or3_2 cells:       56
ABC RESULTS:   sky130_fd_sc_hd__nand3_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o211a_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__and2b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__or2b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a31oi_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a211o_2 cells:       12
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:       55
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:       31
ABC RESULTS:   sky130_fd_sc_hd__xor2_2 cells:       18
ABC RESULTS:   sky130_fd_sc_hd__xnor2_2 cells:       22
ABC RESULTS:   sky130_fd_sc_hd__a211oi_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__o221a_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:       28
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:       50
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:       24
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:      105
ABC RESULTS:   sky130_fd_sc_hd__a22o_2 cells:       12
ABC RESULTS:   sky130_fd_sc_hd__a21bo_2 cells:       18
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:       63
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:       34
ABC RESULTS:   sky130_fd_sc_hd__mux2_2 cells:      207
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:       22
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:       36
ABC RESULTS:   sky130_fd_sc_hd__o31a_2 cells:       33
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:      710
ABC RESULTS:        internal signals:     1593
ABC RESULTS:           input signals:      328
ABC RESULTS:          output signals:      373
Removing temp directory.

57. Executing SETUNDEF pass (replace undef values with defined constants).

58. Executing HILOMAP pass (mapping to constant drivers).

59. Executing SPLITNETS pass (splitting up multi-bit signals).

60. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \TopModule..
Removed 480 unused cells and 2780 unused wires.
<suppressed ~641 debug messages>

61. Executing INSBUF pass (insert buffer cells for connected wires).

62. Executing CHECK pass (checking for obvious problems).
Checking module TopModule...
Found and reported 0 problems.

63. Printing statistics.

=== TopModule ===

   Number of wires:               1493
   Number of wire bits:           1533
   Number of public wires:         172
   Number of public wire bits:     212
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1530
     sky130_fd_sc_hd__a2111o_2       2
     sky130_fd_sc_hd__a2111oi_2      1
     sky130_fd_sc_hd__a211o_2       12
     sky130_fd_sc_hd__a211oi_2       6
     sky130_fd_sc_hd__a21bo_2       18
     sky130_fd_sc_hd__a21boi_2       4
     sky130_fd_sc_hd__a21o_2        63
     sky130_fd_sc_hd__a21oi_2       28
     sky130_fd_sc_hd__a221o_2        2
     sky130_fd_sc_hd__a22o_2        12
     sky130_fd_sc_hd__a311o_2        2
     sky130_fd_sc_hd__a31o_2        24
     sky130_fd_sc_hd__a31oi_2        3
     sky130_fd_sc_hd__a32o_2         3
     sky130_fd_sc_hd__a41o_2         1
     sky130_fd_sc_hd__and2_2        34
     sky130_fd_sc_hd__and2b_2        2
     sky130_fd_sc_hd__and3_2        45
     sky130_fd_sc_hd__and3b_2        2
     sky130_fd_sc_hd__and4_2         2
     sky130_fd_sc_hd__and4bb_2       1
     sky130_fd_sc_hd__buf_1        390
     sky130_fd_sc_hd__dfrtp_2        4
     sky130_fd_sc_hd__dfxtp_2      173
     sky130_fd_sc_hd__inv_2         22
     sky130_fd_sc_hd__mux2_2       207
     sky130_fd_sc_hd__mux4_2         3
     sky130_fd_sc_hd__nand2_2      105
     sky130_fd_sc_hd__nand3_2        1
     sky130_fd_sc_hd__nand3b_2       1
     sky130_fd_sc_hd__nor2_2        50
     sky130_fd_sc_hd__nor3_2         4
     sky130_fd_sc_hd__nor4_2         1
     sky130_fd_sc_hd__nor4b_2        1
     sky130_fd_sc_hd__o211a_2        6
     sky130_fd_sc_hd__o211ai_2       1
     sky130_fd_sc_hd__o21a_2        55
     sky130_fd_sc_hd__o21ai_2       31
     sky130_fd_sc_hd__o21ba_2        4
     sky130_fd_sc_hd__o21bai_2       1
     sky130_fd_sc_hd__o221a_2        2
     sky130_fd_sc_hd__o22a_2         4
     sky130_fd_sc_hd__o22ai_2        1
     sky130_fd_sc_hd__o2bb2a_2       2
     sky130_fd_sc_hd__o311ai_2       1
     sky130_fd_sc_hd__o31a_2        33
     sky130_fd_sc_hd__o31ai_2        4
     sky130_fd_sc_hd__or2_2         36
     sky130_fd_sc_hd__or2b_2         2
     sky130_fd_sc_hd__or3_2         56
     sky130_fd_sc_hd__or3b_2         5
     sky130_fd_sc_hd__or4_2         16
     sky130_fd_sc_hd__or4bb_2        1
     sky130_fd_sc_hd__xnor2_2       22
     sky130_fd_sc_hd__xor2_2        18

   Chip area for module '\TopModule': 14048.473600

64. Executing Verilog backend.
Dumping module `\TopModule'.

65. Executing JSON backend.

End of script. Logfile hash: 823add8e7a, CPU: user 3.92s system 0.17s, MEM: 42.74 MB peak
Yosys 0.38 (git sha1 543faed9c8c, clang++ 17.0.6 -fPIC -Os)
Time spent: 65% 2x abc (7 sec), 6% 34x opt_expr (0 sec), ...
